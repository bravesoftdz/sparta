"
I represent a backend specific draw options.

I hold parameters that are used during drawing operations such as fill, stroke, filter, mask and few more.

Public API and Key Messages

- alpha - value by which the mask generated by this  operation is multiplied.
- compositionOperator - The operator that indicates how the source and  destination patterns are blended.
- antialiasMode - the antialias mode used for this drawing operation

   MozDrawOptions new
	alpha: 0.5;
	antialiasGray;
	composeColorBurn
 
Internal Representation and Key Implementation Points.

	MozAntialiasMode and MozCompositionOp define concrete packend values of antialias modes and composition operators
"
Class {
	#name : #MozDrawOptions,
	#superclass : #FFIExternalStructure,
	#traits : 'TSpartaDrawOptions',
	#classTraits : 'TSpartaDrawOptions classTrait',
	#classVars : [
		'OFFSET_PRIMALPHA',
		'OFFSET_PRIMANTIALIASMODE',
		'OFFSET_PRIMCOMPOSITIONOPERATOR'
	],
	#classInstVars : [
		'default',
		'session',
		'sample'
	],
	#category : #'Sparta-Moz2D'
}

{ #category : #converting }
MozDrawOptions class >> asExternalTypeOn: generator [
	"use handle ivar to hold my instance"
	^ FFIExternalObjectType objectClass: self
]

{ #category : #cleanup }
MozDrawOptions class >> cleanUp [
	<script: 'self cleanUp'>
	super cleanUp.
	
	default := nil.
	sample := nil.
	session := nil.
]

{ #category : #accessing }
MozDrawOptions class >> default [
	session == Smalltalk session
		ifFalse: [
			default := nil.
			session := Smalltalk session ].

	^ default ifNil: [ default := self new ]
]

{ #category : #'field definition' }
MozDrawOptions class >> fieldsDesc [
	"
	self rebuildFieldAccessors
	"
	
	^ #(
		float primAlpha;
		MozCompositionOp primCompositionOperator;
		MozAntialiasMode primAntialiasMode
	)
]

{ #category : #accessing }
MozDrawOptions class >> sample [
	^ sample ifNil: [ sample := self new ]
]

{ #category : #comparing }
MozDrawOptions >> = anObject [
	self == anObject ifTrue: [ ^ true ].
	self class = anObject class ifFalse: [ ^ false ].
	^ self alpha = anObject alpha
		and: [ self antialiasMode = anObject antialiasMode
			and: [ self compositionOperator = anObject compositionOperator ] ]
]

{ #category : #accessing }
MozDrawOptions >> alpha [
	^ self primAlpha
]

{ #category : #accessing }
MozDrawOptions >> alpha: aNumber [
	"Change a global alpha value of a drawing operation.
	aNumber must be within [ 0..1 ] range.
	aNumber must not be nil.
	Method is partially autogenerated. Do not edit and re-generate!"

	self
		assert: [ aNumber isNotNil and: [ aNumber isNumber
			and: [ aNumber >= 0 and: [ aNumber <= 1 ] ] ] ]
		description: [ 'Alpha must be a number within [0..1] range!' ].

	self primAlpha: aNumber
]

{ #category : #'antialias modes' }
MozDrawOptions >> antialiasDefault [
	self antialiasMode: MozAntialiasMode DEFAULT
]

{ #category : #'antialias modes' }
MozDrawOptions >> antialiasGray [
	self antialiasMode: MozAntialiasMode GRAY
]

{ #category : #accessing }
MozDrawOptions >> antialiasMode [
	^ self primAntialiasMode
]

{ #category : #accessing }
MozDrawOptions >> antialiasMode: anObject [
	self primAntialiasMode: anObject
]

{ #category : #'antialias modes' }
MozDrawOptions >> antialiasNone [
	self antialiasMode: MozAntialiasMode NONE
]

{ #category : #'antialias modes' }
MozDrawOptions >> antialiasSubpixel [
	self antialiasMode: MozAntialiasMode SUBPIXEL
]

{ #category : #copying }
MozDrawOptions >> clone [
	self
		assert: [ self isExternal not ]
		description: [ 'Must be in pharo memory' ].

	^ self deepCopy
]

{ #category : #'composition operators' }
MozDrawOptions >> composeAdd [
	self compositionOperator: MozCompositionOp OP_ADD
]

{ #category : #'composition operators' }
MozDrawOptions >> composeAtop [
	self compositionOperator: MozCompositionOp OP_ATOP
]

{ #category : #'composition operators' }
MozDrawOptions >> composeClear [
	self compositionOperator: MozCompositionOp OP_CLEAR
]

{ #category : #'composition operators' }
MozDrawOptions >> composeColor [
	^ self compositionOperator: MozCompositionOp OP_COLOR
]

{ #category : #'composition operators' }
MozDrawOptions >> composeColorBurn [
	^ self compositionOperator: MozCompositionOp OP_COLOR_BURN
]

{ #category : #'composition operators' }
MozDrawOptions >> composeColorDodge [
	^ self compositionOperator: MozCompositionOp OP_COLOR_DODGE
]

{ #category : #'composition operators' }
MozDrawOptions >> composeDarken [
	^ self compositionOperator: MozCompositionOp OP_DARKEN
]

{ #category : #'composition operators' }
MozDrawOptions >> composeDestAtop [
	^ self compositionOperator: MozCompositionOp OP_DEST_ATOP
]

{ #category : #'composition operators' }
MozDrawOptions >> composeDestIn [
	^ self compositionOperator: MozCompositionOp OP_DEST_IN
]

{ #category : #'composition operators' }
MozDrawOptions >> composeDestOut [
	^ self compositionOperator: MozCompositionOp OP_DEST_OUT
]

{ #category : #'composition operators' }
MozDrawOptions >> composeDestOver [
	^ self compositionOperator: MozCompositionOp OP_DEST_OVER
]

{ #category : #'composition operators' }
MozDrawOptions >> composeDifference [
	^ self compositionOperator: MozCompositionOp OP_DIFFERENCE
]

{ #category : #'composition operators' }
MozDrawOptions >> composeExclusion [
	^ self compositionOperator: MozCompositionOp OP_EXCLUSION
]

{ #category : #'composition operators' }
MozDrawOptions >> composeHardLight [
	^ self compositionOperator: MozCompositionOp OP_HARD_LIGHT
]

{ #category : #'composition operators' }
MozDrawOptions >> composeHue [
	^ self compositionOperator: MozCompositionOp OP_HUE
]

{ #category : #'composition operators' }
MozDrawOptions >> composeIn [
	^ self compositionOperator: MozCompositionOp OP_IN
]

{ #category : #'composition operators' }
MozDrawOptions >> composeLighten [
	^ self compositionOperator: MozCompositionOp OP_LIGHTEN
]

{ #category : #'composition operators' }
MozDrawOptions >> composeLuminosity [
	^ self compositionOperator: MozCompositionOp OP_LUMINOSITY
]

{ #category : #'composition operators' }
MozDrawOptions >> composeMultiply [
	^ self compositionOperator: MozCompositionOp OP_MULTIPLY
]

{ #category : #'composition operators' }
MozDrawOptions >> composeOut [
	^ self compositionOperator: MozCompositionOp OP_OUT
]

{ #category : #'composition operators' }
MozDrawOptions >> composeOver [
	self compositionOperator: MozCompositionOp OP_OVER
]

{ #category : #'composition operators' }
MozDrawOptions >> composeOverlay [
	^ self compositionOperator: MozCompositionOp OP_OVERLAY
]

{ #category : #'composition operators' }
MozDrawOptions >> composeSaturation [
	^ self compositionOperator: MozCompositionOp OP_SATURATION
]

{ #category : #'composition operators' }
MozDrawOptions >> composeScreen [
	^ self compositionOperator: MozCompositionOp OP_SCREEN
]

{ #category : #'composition operators' }
MozDrawOptions >> composeSoftLight [
	^ self compositionOperator: MozCompositionOp OP_SOFT_LIGHT
]

{ #category : #'composition operators' }
MozDrawOptions >> composeSource [
	^ self compositionOperator: MozCompositionOp OP_SOURCE
]

{ #category : #'composition operators' }
MozDrawOptions >> composeXor [
	^ self compositionOperator: MozCompositionOp OP_XOR
]

{ #category : #accessing }
MozDrawOptions >> compositionOperator [
	^ self primCompositionOperator
]

{ #category : #accessing }
MozDrawOptions >> compositionOperator: anObject [
	self primCompositionOperator: anObject
]

{ #category : #comparing }
MozDrawOptions >> hash [
	^ (self alpha hash bitXor: self antialiasMode hash) bitXor: self compositionOperator hash
]

{ #category : #initialization }
MozDrawOptions >> initialize [
	"Do not send `super initialize` otherwise `handle` is set to nil"

	self reset
]

{ #category : #'private - testing' }
MozDrawOptions >> isExternal [
	^ self getHandle isExternalAddress
]

{ #category : #'accessing structure variables' }
MozDrawOptions >> primAlpha [
	"This method was automatically generated"
	^handle floatAt: OFFSET_PRIMALPHA
]

{ #category : #'accessing structure variables' }
MozDrawOptions >> primAlpha: anObject [
	"This method was automatically generated"
	handle floatAt: OFFSET_PRIMALPHA put: anObject
]

{ #category : #'accessing structure variables' }
MozDrawOptions >> primAntialiasMode [
	"This method was automatically generated"
	^MozAntialiasMode fromInteger: (handle signedByteAt: OFFSET_PRIMANTIALIASMODE)
]

{ #category : #'accessing structure variables' }
MozDrawOptions >> primAntialiasMode: anObject [
	"This method was automatically generated"
	handle signedByteAt: OFFSET_PRIMANTIALIASMODE put: anObject value
]

{ #category : #'accessing structure variables' }
MozDrawOptions >> primCompositionOperator [
	"This method was automatically generated"
	^MozCompositionOp fromInteger: (handle signedByteAt: OFFSET_PRIMCOMPOSITIONOPERATOR)
]

{ #category : #'accessing structure variables' }
MozDrawOptions >> primCompositionOperator: anObject [
	"This method was automatically generated"
	handle signedByteAt: OFFSET_PRIMCOMPOSITIONOPERATOR put: anObject value
]

{ #category : #initialization }
MozDrawOptions >> reset [
	"Setting default values according to backend specification"
	self alpha: 1.
	self antialiasDefault.
	self composeOver
]
